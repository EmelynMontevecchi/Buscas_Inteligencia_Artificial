# Bibliotecas.
from queue import Queue
import networkx as nx
import matplotlib.pyplot as plt

# Define a classe Vertice
class Vertice:
    def __init__(self, rotulo):
        self.rotulo = rotulo

    def __eq__(self, outro):
        return outro.rotulo == self.rotulo

    def __repr__(self):
        return self.rotulo

    def __hash__(self):
        return hash(self.rotulo)

# Define a classe Mapa.
class Mapa:
    def __init__(self):
        self.listaAdjacencias = dict()
        self.listaVertices = set()
    
    # Adiciona vértices ao mapa.
    def adicionaVertice(self, rotulo):
        self.listaVertices.add(Vertice(rotulo))

    def localizaRotulo(self, rotulo):
        for vertice in self.listaVertices:
            if vertice.rotulo == rotulo:
                return vertice
        return -1
    # Adiciona Arco ao mapa.
    def adicionaArco(self, r1, r2):
        if not self.listaAdjacencias.get(r1):
            self.listaAdjacencias[r1] = [r2]
        else:
            self.listaAdjacencias[r1].append(r2)

        if not self.listaAdjacencias.get(r2):
            self.listaAdjacencias[r2] = [r1]
        else:
            self.listaAdjacencias[r2].append(r1)

    def __repr__(self):
        return str(self.listaAdjacencias)

    def desenhaGrafo(self):
        g = Graph(comment='Romenia', strict=True)
        for vertice in self.listaVertices:
            g.node(vertice.rotulo, vertice.rotulo, fontsize="10")
        for k, v in self.listaAdjacencias.items():
            for j in v:
                g.edge(k, j, dir="none")
        return g

    def heuristica(self, cidade):
        # Por exemplo, a distância euclidiana em linha reta para Bucharest a partir de Arad
        heuristica = {
            'Arad': 366,
            'Zerind': 374,
            'Oradea': 380,
            'Sibiu': 253,
            'Timisoara': 329,
            'Lugoj': 244,
            'Mehadia': 241,
            'Dobreta': 242,
            'Craiova': 160,
            'Rimnicu': 193,
            'Fagaras': 176,
            'Pitesti': 100,
            'Bucharest': 0,
            'Giurgiu': 77
        }
        return heuristica[cidade]

    def buscaLargura(self, origem, destino):
        fila = Queue()
        visitados = set()

        fila.put(origem)
        visitados.add(origem)

        while not fila.empty():
            atual = fila.get()

            if atual == destino:
                return True

            vizinhos = self.listaAdjacencias[atual]
            for vizinho in vizinhos:
                if vizinho not in visitados:
                    fila.put(vizinho)
                    visitados.add(vizinho)

        return False

# Cria uma instância da classe Mapa chamada mp.
mp = Mapa()

mp.adicionaVertice('Arad')
mp.adicionaVertice('Zerind')
mp.adicionaVertice('Oradea')
mp.adicionaVertice('Sibiu')
mp.adicionaVertice('Timisoara')
mp.adicionaVertice('Lugoj')
mp.adicionaVertice('Mehadia')
mp.adicionaVertice('Dobreta')
mp.adicionaVertice('Craiova')
mp.adicionaVertice('Rimnicu')
mp.adicionaVertice('Fagaras')
mp.adicionaVertice('Pitesti')
mp.adicionaVertice('Bucharest')
mp.adicionaVertice('Giurgiu')

mp.adicionaArco('Arad', 'Zerind')
mp.adicionaArco('Arad', 'Sibiu')
mp.adicionaArco('Arad', 'Timisoara')

mp.adicionaArco('Zerind', 'Oradea')

mp.adicionaArco('Oradea', 'Sibiu')

mp.adicionaArco('Sibiu', 'Fagaras')
mp.adicionaArco('Sibiu', 'Rimnicu')

mp.adicionaArco('Timisoara', 'Lugoj')

mp.adicionaArco('Lugoj', 'Mehadia')
mp.adicionaArco('Lugoj', 'Dobreta')

mp.adicionaArco('Mehadia', 'Dobreta')

mp.adicionaArco('Craiova', 'Dobreta')
mp.adicionaArco('Craiova', 'Pitesti')
mp.adicionaArco('Craiova', 'Rimnicu')

mp.adicionaArco('Rimnicu', 'Sibiu')
mp.adicionaArco('Rimnicu', 'Pitesti')

mp.adicionaArco('Fagaras', 'Sibiu')
mp.adicionaArco('Fagaras', 'Bucharest')

mp.adicionaArco('Pitesti', 'Rimnicu')
mp.adicionaArco('Pitesti', 'Craiova')
mp.adicionaArco('Pitesti', 'Bucharest')

mp.adicionaArco('Bucharest', 'Fagaras')
mp.adicionaArco('Bucharest', 'Pitesti')
mp.adicionaArco('Bucharest', 'Giurgiu')

origem = 'Arad'
destino = 'Bucharest'
# Define a função buscaCidades que realiza a busca em largura no mapa (grafo).
def buscaCidades(grafo, inicio, meta):
    border = [[inicio]]
    visited = set()
   # Executa um loop enquanto houver vértices na borda.
    while border:
        route = border.pop(0)
        v = route[-1]
        # Obtém o último vértice do caminho.
        # Verifica se o vértice atual é igual ao vértice de destino.
        if v == meta:
            return route
        # Verifica se o vértice atual não foi visitado.
        elif v not in visited:
            # Obtém a lista de vértices adjacentes ao vértice atual.
            adjacentes = grafo.listaAdjacencias.get(v, [])
            for neighbour in adjacentes:
                newRoute = route + [neighbour]
                border.append(newRoute)

                if neighbour == meta:
                    return newRoute

            visited.add(v)

    return None
# Chama a função buscaCidades para encontrar o caminho entre a origem e o destino no mapa.
caminho = buscaCidades(mp, origem, destino)

# Verifica se o caminho foi encontrado.
if caminho is not None:
    print(f"Existe um caminho entre {origem} e {destino}")
else:
    print(f"Nenhum caminho encontrado entre {origem} e {destino}")



# Cria uma lista de pares de vértices consecutivos no caminho encontrado.
arcos_caminho = [(caminho[i], caminho[i+1]) for i in range(len(caminho)-1)]

# Desenhar o grafo
grafo = nx.Graph(mp.listaAdjacencias)
pos = nx.spring_layout(grafo)

# Desenhar os nós
nx.draw_networkx_nodes(grafo, pos, node_color='lightblue', node_size=500)

# Desenhar os arcos
nx.draw_networkx_edges(grafo, pos, width=1.0, alpha=0.5)

# Desenhar o caminho em vermelho
nx.draw_networkx_edges(grafo, pos, edgelist=arcos_caminho, width=2.0, alpha=0.8, edge_color='red')

# Adicionar os rótulos aos nós
labels = {}
for cidade in grafo.nodes:
    labels[cidade] = cidade

nx.draw_networkx_labels(grafo, pos, labels, font_size=8)

plt.title('Mapa da Romênia')
plt.axis('off')
plt.show()
